AWSTemplateFormatVersion: '2010-09-09'
Description: DuckLake stack managed by DBT (Paul)
Transform: AWS::Serverless-2016-10-31

Parameters:
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of subnet IDs for the Database
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID for the Database
  ImageTag:
    Type: String
    Description: The tag of the Docker image to use for the DBT container

Resources:
  LakeBucket:
    Type: AWS::S3::Bucket

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for public RDS
      SubnetIds: !Ref SubnetIds

  PublicDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable public access to PostgreSQL
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0

  PostgresDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: "lake_catalog"
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: "17"
      MasterUsername: "postgres"
      ManageMasterUserPassword: true
      VPCSecurityGroups:
        - !GetAtt PublicDBSecurityGroup.GroupId
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: true
      BackupRetentionPeriod: 0
      DeletionProtection: false
      MultiAZ: false

  Cluster:
    Type: AWS::ECS::Cluster
    Properties: 
      CapacityProviders: 
        - FARGATE

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
          Condition:
            ArnLike:
              aws:SourceArn: !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:*
            StringEquals:
              aws:SourceAccount: !Ref AWS::AccountId
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: LakeBucketFullAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:ListBucket
                  - s3:GetBucketLocation
                  - s3:PutObjectAcl
                  - s3:GetObjectAcl
                Resource:
                  - !Sub "${LakeBucket.Arn}"
                  - !Sub "${LakeBucket.Arn}/*"
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !GetAtt PostgresDB.MasterUserSecret.SecretArn
                

  DataTransformTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: DataTransform
      Cpu: 1024
      Memory: 8192
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      RuntimePlatform:
        CpuArchitecture: X86_64
      ContainerDefinitions:
        - Name: dbt
          Cpu: 1024
          Memory: 8192
          Image: !Sub "ghcr.io/sourceallies/duck-lake-example:${ImageTag}"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: dbt
          Command: [run]
          Environment:
            - Name: PGHOST
              Value: !GetAtt PostgresDB.Endpoint.Address
            - Name: PGPORT
              Value: !GetAtt PostgresDB.Endpoint.Port
            - Name: DATA_S3_PATH
              Value: !Sub "s3://${LakeBucket}/data/"
          Secrets:
            - Name: PGUSER
              ValueFrom: !Sub "${PostgresDB.MasterUserSecret.SecretArn}:username::"
            - Name: PGPASSWORD
              ValueFrom: !Sub "${PostgresDB.MasterUserSecret.SecretArn}:password::"

  DataTransformStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Definition:
        StartAt: RunDataTransformTask
        States:
          RunDataTransformTask:
            Type: Task
            Resource: arn:aws:states:::ecs:runTask.sync
            Parameters:
              Cluster: !Ref Cluster
              TaskDefinition: !Ref DataTransformTaskDefinition
              LaunchType: FARGATE
              NetworkConfiguration:
                AwsvpcConfiguration:
                  Subnets:
                    - !Select [ 0, !Ref SubnetIds ]
                    - !Select [ 1, !Ref SubnetIds ]
                  AssignPublicIp: ENABLED
                  SecurityGroups:
                    - !GetAtt PublicDBSecurityGroup.GroupId
            End: true
      Policies:
        - AmazonECS_FullAccess

Outputs:
  DBEndpoint:
    Description: The connection endpoint for the PostgreSQL instance
    Value: !GetAtt PostgresDB.Endpoint.Address
  DBPort:
    Description: The port of the PostgreSQL instance
    Value: !GetAtt PostgresDB.Endpoint.Port